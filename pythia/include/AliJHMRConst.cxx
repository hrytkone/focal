#include "AliJHMRConst.h"

const double detEta[NDET][2] = {
    {3.2, 5.5},
    {2.6, 4.},
    {-0.8, 0.8},
    {-1000., 1000.}
};

// STAR bins
//double triggPt[NTRIGGBINS+1] = {1.0, 2.0, 2.5, 3.0};
//double assocPt[NASSOCBINS+1] = {0.5, 1.0, 1.5, 2.0, 2.5};

// FoCal bins
double triggPt[NTRIGGBINS+1] = {4.0, 8.0, 18.0};
double assocPt[NASSOCBINS+1] = {2.0, 3.0, 4.0, 8.0};

// When using leading trigger
double leadingPt[NLEADINGBINS+1] = {2., 2.5, 3., 3.5, 4., 5., 6., 8., 10., 15., 20.}; // Needed for corrections

// For pure PYTHIA simulations
//const double massWindowMin = 110.;
//const double massWindowMax = 160.;

// For full detector sim
const double massWindowMin = 50;
const double massWindowMax = 200.;

const double sidebandMin = 220.;
const double sidebandMax = 350.;
const double pi0eff = 0.9795;

const double massSigmaTrigg[NTRIGGBINS] = {27.4508, 28.5018};//, 24.3633, 20.5244};
const double massSigmaAssoc[NASSOCBINS] = {28.8498, 25.1395};//, 27.4508, 28.5018, 24.3633};
const double massPeakPosTrigg[NTRIGGBINS] = {140.779, 143.724};//, 146.13, 146.865};
const double massPeakPosAssoc[NASSOCBINS] = {130, 135.607};//, 140.779, 143.724, 146.13};

// Use these for leading trigger case
const double effCorrLeading[NLEADINGBINS] = {0.250451, 0.275956, 0.326522, 0.368184, 0.424019, 0.527646, 0.546536, 0.585381, 0.618371, 0.620072};

const double etacut = 0.2;
const double asymcut = 0.9;
const double thetacut = 0.;

const double kJPi = TMath::Pi();
const double kJTwoPi = 2 * TMath::Pi();

const double etaBinWidth = 0.025;
const double phiBinWidth = 0.025;

const double etaTrackerRange = 0.9;
const double etaFocalRange = detEta[0][1] - detEta[0][0];
const double etaSTARRange = detEta[1][1] - detEta[1][0];
const int nEtaBinTracker = 2.*int(etaTrackerRange/etaBinWidth) + 1;
const int nEtaBinFocal = int(etaFocalRange/etaBinWidth) + 1;
const int nEtaBinSTAR = int(etaSTARRange/etaBinWidth) + 1;

const double deltaPhiMin = -kJPi/2.0;
const double deltaPhiMax = 3.0*kJPi/2.0;
const int nPhiBin = int((deltaPhiMax-deltaPhiMin)/phiBinWidth) + 1;

double logBinsX[NINCPTBIN+1], limMin = 0.1, limMax = 100;
const double logBW = (log(limMax) - log(limMin))/NINCPTBIN;

double logBinsXfrac[NXFRACBIN+1], limXfracMin = 1e-7, limXfracMax = 1.;
const double logXfracBW = (log(limXfracMax) - log(limXfracMin))/NXFRACBIN;

const double incEtaRange = 20.0;
double limPhotonEnergyMin = 0., limPhotonEnergyMax = 1500.;

double ptEff[NPTEFFBIN+1]={2, 2.24519, 2.52044, 2.82944, 3.17631, 3.56571, 4.00285, 4.49359, 5.04448, 5.66291, 6.35716, 7.13652, 8.01142, 8.99358, 10.0962, 11.3339, 12.7234, 14.2832, 16.0343, 18};
double etaEff[NETAEFFBIN+1]={3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3};

// ASYM CUT = 0.8
//const double effEtaPt[NETAEFFBIN][NPTEFFBIN] = 
//{{0.424,0.401,0.393,0.460,0.342,0.434,0.390,0.439,0.376,0.322,0.376,0.433,0.428,0.406,0.454,0.475,0.525,0.543,0.413},
//{0.423,0.358,0.466,0.415,0.336,0.373,0.369,0.339,0.389,0.363,0.428,0.403,0.394,0.425,0.488,0.482,0.517,0.553,0.414},
//{0.364,0.562,0.473,0.489,0.427,0.427,0.484,0.320,0.357,0.354,0.390,0.399,0.429,0.484,0.526,0.539,0.523,0.523,0.465},
//{0.396,0.392,0.385,0.346,0.316,0.277,0.328,0.269,0.335,0.371,0.270,0.394,0.413,0.394,0.478,0.522,0.457,0.454,0.401},
//{0.474,0.390,0.402,0.444,0.383,0.422,0.310,0.369,0.393,0.374,0.432,0.447,0.464,0.555,0.544,0.527,0.517,0.627,0.462},
//{0.448,0.382,0.424,0.425,0.291,0.365,0.343,0.300,0.418,0.350,0.446,0.484,0.468,0.483,0.534,0.530,0.601,0.566,0.500},
//{0.466,0.384,0.307,0.316,0.276,0.272,0.279,0.344,0.420,0.434,0.400,0.475,0.482,0.538,0.517,0.521,0.490,0.527,0.438},
//{0.444,0.317,0.289,0.367,0.272,0.299,0.455,0.367,0.440,0.484,0.475,0.503,0.512,0.552,0.605,0.569,0.598,0.536,0.492},
//{0.384,0.427,0.295,0.299,0.375,0.433,0.444,0.383,0.549,0.451,0.445,0.571,0.589,0.663,0.632,0.552,0.595,0.555,0.517},
//{0.369,0.403,0.368,0.332,0.385,0.442,0.397,0.507,0.489,0.473,0.554,0.666,0.535,0.562,0.597,0.630,0.575,0.552,0.488},
//{0.432,0.293,0.377,0.295,0.412,0.409,0.493,0.477,0.459,0.561,0.520,0.545,0.521,0.531,0.556,0.603,0.583,0.556,0.479},
//{0.317,0.288,0.246,0.293,0.248,0.405,0.352,0.404,0.408,0.461,0.418,0.448,0.471,0.452,0.492,0.469,0.437,0.432,0.328},
//{0.333,0.300,0.328,0.335,0.495,0.525,0.407,0.544,0.537,0.492,0.568,0.534,0.577,0.676,0.611,0.577,0.525,0.432,0.397},
//{0.385,0.359,0.484,0.489,0.516,0.615,0.528,0.502,0.570,0.558,0.612,0.610,0.622,0.596,0.619,0.625,0.555,0.475,0.360},
//{0.272,0.494,0.450,0.600,0.480,0.468,0.530,0.487,0.529,0.569,0.655,0.546,0.633,0.560,0.586,0.542,0.485,0.380,0.323},
//{0.378,0.335,0.455,0.429,0.524,0.628,0.483,0.589,0.610,0.628,0.614,0.578,0.647,0.566,0.526,0.487,0.431,0.347,0.239},
//{0.429,0.519,0.447,0.533,0.613,0.667,0.600,0.541,0.608,0.592,0.570,0.556,0.690,0.548,0.531,0.456,0.360,0.277,0.152},
//{0.383,0.538,0.559,0.468,0.622,0.549,0.540,0.536,0.661,0.563,0.582,0.605,0.505,0.497,0.436,0.355,0.247,0.141,0.064},
//{0.333,0.509,0.490,0.638,0.550,0.590,0.696,0.570,0.524,0.568,0.592,0.561,0.497,0.444,0.382,0.292,0.168,0.088,0.031}};

// ASYM CUT = 0.9
const double effEtaPt[NETAEFFBIN][NPTEFFBIN] = 
{{0.448,0.462,0.446,0.453,0.399,0.459,0.482,0.489,0.387,0.393,0.478,0.436,0.469,0.454,0.513,0.520,0.592,0.593,0.483},
{0.429,0.404,0.498,0.447,0.426,0.431,0.390,0.388,0.406,0.400,0.483,0.448,0.450,0.460,0.555,0.535,0.582,0.625,0.481},
{0.389,0.532,0.538,0.496,0.470,0.441,0.519,0.421,0.430,0.472,0.475,0.459,0.485,0.560,0.583,0.595,0.569,0.574,0.538},
{0.418,0.371,0.430,0.410,0.337,0.344,0.377,0.357,0.406,0.422,0.362,0.434,0.464,0.433,0.546,0.553,0.521,0.507,0.445},
{0.460,0.452,0.416,0.460,0.450,0.423,0.352,0.451,0.469,0.456,0.490,0.512,0.499,0.595,0.647,0.591,0.601,0.667,0.518},
{0.527,0.492,0.453,0.471,0.415,0.432,0.409,0.423,0.499,0.406,0.538,0.537,0.535,0.556,0.565,0.608,0.665,0.613,0.567},
{0.539,0.383,0.367,0.372,0.363,0.363,0.388,0.453,0.454,0.489,0.425,0.522,0.554,0.582,0.583,0.593,0.560,0.566,0.504},
{0.434,0.355,0.365,0.478,0.346,0.387,0.475,0.452,0.487,0.558,0.497,0.553,0.576,0.572,0.659,0.649,0.660,0.605,0.541},
{0.487,0.472,0.470,0.398,0.480,0.481,0.511,0.464,0.578,0.566,0.506,0.635,0.639,0.749,0.689,0.635,0.679,0.647,0.588},
{0.417,0.490,0.461,0.443,0.523,0.503,0.500,0.544,0.570,0.571,0.605,0.752,0.628,0.633,0.674,0.690,0.674,0.653,0.580},
{0.508,0.368,0.486,0.427,0.534,0.545,0.514,0.517,0.546,0.605,0.558,0.636,0.595,0.646,0.654,0.683,0.678,0.649,0.562},
{0.444,0.412,0.390,0.433,0.355,0.495,0.390,0.412,0.463,0.487,0.478,0.516,0.533,0.496,0.547,0.556,0.515,0.473,0.377},
{0.500,0.466,0.421,0.388,0.561,0.551,0.478,0.596,0.607,0.583,0.627,0.568,0.679,0.744,0.705,0.655,0.623,0.519,0.473},
{0.508,0.483,0.523,0.535,0.652,0.594,0.560,0.564,0.616,0.668,0.687,0.694,0.716,0.722,0.691,0.702,0.658,0.585,0.449},
{0.396,0.562,0.539,0.615,0.560,0.598,0.630,0.551,0.561,0.681,0.702,0.664,0.737,0.652,0.700,0.677,0.598,0.491,0.382},
{0.536,0.464,0.519,0.521,0.555,0.650,0.585,0.674,0.728,0.708,0.784,0.674,0.712,0.715,0.637,0.661,0.558,0.445,0.305},
{0.490,0.568,0.489,0.596,0.688,0.701,0.720,0.637,0.702,0.666,0.715,0.668,0.793,0.638,0.651,0.568,0.428,0.326,0.186},
{0.468,0.583,0.639,0.542,0.693,0.617,0.643,0.670,0.758,0.649,0.683,0.700,0.601,0.632,0.532,0.422,0.296,0.180,0.082},
{0.396,0.542,0.520,0.636,0.624,0.656,0.711,0.657,0.632,0.649,0.665,0.652,0.583,0.533,0.463,0.335,0.207,0.106,0.042}};